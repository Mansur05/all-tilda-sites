<?php

$categories = [
    'all' => 'Все (All)',
    'bu' => 'Бизнес (Business)',
    'st' => 'Магазин (Store)',
    'ev' => 'Мероприятие (Event)',
    'ed' => 'Медиа (Media)',
    'pf' => 'Портфолио (Portfolio)',
    'cu' => 'Образование (Education)',
    'pr' => 'Персональные',
    'ot' => 'Другое'
];

function parse($page)
{
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, "https://mot.tildacdn.com/api/getsiteslist/?category=all&slice=$page&lang=ru");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_ENCODING, 'gzip, deflate');

    $headers = array();
    $headers[] = 'Authority: mot.tildacdn.com';
    $headers[] = 'Sec-Ch-Ua: ^^Google';
    $headers[] = 'Accept: application/json, text/javascript, */*; q=0.01';
    $headers[] = 'Sec-Ch-Ua-Mobile: ?0';
    $headers[] = 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36';
    $headers[] = 'Origin: https://tilda.cc';
    $headers[] = 'Sec-Fetch-Site: cross-site';
    $headers[] = 'Sec-Fetch-Mode: cors';
    $headers[] = 'Sec-Fetch-Dest: empty';
    $headers[] = 'Referer: https://tilda.cc/';
    $headers[] = 'Accept-Language: ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7';
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
        $result = false;
    }
    curl_close($ch);

    return $result;
}

function get($categories, $from = 1, $to = 200)
{
    $resultArray = array();
    $resultArray['lastUpdated'] = date('d.m.Y');

    foreach (range($from, $to) as $page) {
        $result = json_decode(parse($page), true);

        foreach ($result['sites'] as $site) {
            $resultArray['sites'][] = [
                'category' => $categories[$site['category']],
                'title' => $site['title'],
                'url' => $site['url'],
                'img' => $site['img_auto'],
            ];
        }

        echo $page . ' completed!' . PHP_EOL;
        sleep(1);
    }

    return $resultArray;
}

function findKeys($template)
{
    $result = [];

    preg_match_all('/{{[a-zA-Z0-9_\s]+}}/', $template, $matches);

    foreach ($matches[0] as $match) {
        $result[clearKey($match)] = $match;
    }

    return $result;
}

function clearKey($key)
{
    $key = str_replace('{', '', $key);
    $key = str_replace('}', '', $key);
    $key = str_replace(' ', '', $key);

    return $key;
}

function replaceKey($template, $keys, $data)
{
    foreach ($keys as $key => $keyName) {
        if (isset($data[$key]) && !empty($data[$key])) $template = str_replace($keyName, $data[$key], $template);
        else $template = str_replace($keyName, "NO DATA FOR THIS KEY - $keyName", $template);
    }

    return $template;
}

function template($data, $file = 'index.html')
{
    $template = file_get_contents('template.html');
    $render = '';
    foreach ($data['sites'] as $site) {
        $render .= replaceKey($template, findKeys($template), $site);
    }

    $data['render'] = $render;

    $index = file_get_contents('empty_index.html');
    file_put_contents('index.html', replaceKey($index, findKeys($index), $data));
}

$result = get($categories, 1, 1);
template($result);